function run_trials(AoA_vals, freq_vals, speed, wing_type, measure_revs, measure_revs_slow, automatic, load_cell, debug)

time_now = datetime;
time_now.Format = 'yyyy-MM-dd HH-mm-ss';
diary("data\output logs\" + speed + "ms_" + string(time_now) + ".txt")

% DAQ Parameters
rate = 9000; % measurement rate of NI DAQ, in Hz
offset_duration = 5; % in seconds
session_duration = -1; % in seconds
calibration_filepath = "../DAQ/Calibration Files/FT52907.cal"; 
voltage = 5; % 5 or 10 volts

case_name = "force_transducer_test";

% Remind user of setup procedure
procedure_UI();

diary off % IS THIS INITIAL DIARY NECESSARY, WHAT IS GETTING OUTPUT?

% Make Calimero data collection object
flapper_obj = Calimero(rate, voltage);

% Get calibration matrix from calibration file
cal_matrix = obtain_cal(calibration_filepath);

%

j = 1;
while (j <= length(AoA_vals))
diary("data\output logs\" + speed + "ms_" + AoA_vals(j) + "deg.txt")

%----------------------------
% Turn off wind tunnel
%----------------------------
if (speed ~= 0)
    if (automatic)
        VFD_stop; % stop wind tunnel motor
        wait_speed_reached();
    else
        % Confirm user has stopped wind before recording offset for this AoA
        wind_on_off_UI("off");
    end
end

%----------------------------
% Move MPS to prescribed pitch angle
%----------------------------
move_pitch(AoA_vals(j));

% Get offset data before flapping at this angle with no wind
offset_name = wing_type + "_" + speed + "m.s_" + AoA_vals(j) + "deg";
offsets = flapper_obj.get_force_offsets(offset_name, offset_duration);
offsets = offsets(1,:); % just taking means, no SDs
disp("Offset data at this AoA has been gathered");
beep1;
pause(1)

%----------------------------
% Turn wind tunnel back on
%----------------------------
if (speed ~= 0)
    if (automatic)
        VFD_start; % start wind tunnel motor
        wait_speed_reached();
    else
        % Confirm user has resumed wind before recording data
        wind_on_off_UI("on");
    end
end

% Begin looping through each wingbeat frequency
i = 1;
while (i <= length(freq_vals))
disp("Now running trial with " + freq_vals(i) + " Hz, at " + AoA_vals(j) + " deg AoA");
dictate("Now running trial with " + freq_vals(i) + " Hz, at " + AoA_vals(j) + " deg AoA");

% Set case name and wingbeat frequency for this trial
case_name = wing_type + "_" + speed + "m.s_" + AoA(j) + "deg_" + freq_vals(i) + "Hz";
vel = freq_vals(i)*rev_ticks; % ticks / sec

% Get offset data before flapping at this angle and windspeed
offsets_before = flapper_obj.get_force_offsets(case_name + "_before", offset_duration);
offsets_before = offsets_before(1,:); % just taking means, no SDs
disp("Initial offset data has been gathered");
beep2;

% -------SET FLAPPING SPEED WITH ENCODER-------------
% Wait until flapping speed is reached by controller
% include tic toc to see how long this takes and record that value in diary
% by printing it out

% estimate recording length based on parameters
% ----- NEED TO UPDATE THIS WITH VALUES --------
estimate_params = {rev_ticks acc vel measure_revs padding_revs wait_time hold_time};
[distance, session_duration, trigger_pos] = estimate_duration(estimate_params{:});

% Collect experiment data during flapping
disp("Experiment data collection has begun");
results = flapper_obj.measure_force(case_name, session_duration);
disp("Experiment data has been gathered");
beep2; 

% --------COMMAND MOTOR TO STOP SPINNING AND RETURN TO GLIDING POSITION---

% Are we approaching limits of load cell?
checkLimits(results);

% Translate data from raw values into meaningful values
[time, force, voltAdj, theta, Z] = process_data(results, offsets, cal_matrix);

% Get offset data after flapping at this angle and windspeed
offsets_after = flapper_obj.get_force_offsets(case_name + "_after", offset_duration);
offsets_after = offsets_after(1,:); % just taking means, no SDs
disp("Final offset data has been gathered");
beep2;

drift = offsets_after - offsets_before; % over one trial
total_drift = offsets_after - offsets; % since initial tare

% Convert drift from voltages into forces and moments
drift = cal_matrix * drift';
total_drift = cal_matrix * total_drift';

drift_string = string(total_drift);
% separate numbers by space
drift_string = [sprintf('%s   ',drift_string{1:end-1}), drift_string{end}];
disp("Drift since tare with tunnel off: ")
disp(drift_string)

fc = 100;  % cutoff frequency in Hz for filter

% Display preliminary data
raw_plot(time, force, voltAdj, theta, case_name, drift, rate, fc);

% -------------------------------------------------
% -------- Move to next wingbeat frequency --------
% -------------------------------------------------
if (i < length(freq) && ~automatic)
    i = handle_next_trial(i, length(freq));
end

if (~debug)
    % save wind tunnel data for non-dimensionalization later
    wind_tunnel_save(case_name)
end

i = i + 1;
end

% ------------------------------------------
% -------- Move to next pitch angle --------
% ------------------------------------------
if (j < length(AoA) && ~automatic)
    j = handle_next_AoA(j, length(AoA));
end

% Get final offset data
offset_name = wing_type + "_" + speed + "m.s_" + AoA(j) + "deg_final";
offsets_final = FT_obj.get_force_offsets(offset_name, offset_duration);
disp("Final offset data at this AoA has been gathered");
beep2;

j = j + 1;
diary off
end

% NEEDS UPDATING, SAVING PLOT THAT GETS UPDATED THROUGHOUT
time_now = datetime;
time_now.Format = 'yyyy-MM-dd HH-mm-ss';
saveas(f,'data\plots\compareAoA_' + speed + "ms_" + string(time_now) + ".fig")

if (~debug)
    % Clean up
    delete(cleanup);
    delete(FT_obj);
end
end